From: Ori Livneh <ori@wikimedia.org>
Date: Tue, 13 Jan 2015 20:42:09 -0800
Subject: Ensure the repository configuration lock is released

When zuul initializes a fresh clone of a git repository, it attempts to set
the user.name and user.email configuration options in .git/config. This job is
the responsibility of GitConfigParser, which is currently broken, because
GitConfigParser.write() acquires a lock but does not release it.  The lock is
released in the object's __del__ method, which is invoked when the object is
about to be dereferenced. This is not a reliable means of ensuring the
lock is released, because it can break if there is a circular reference keeping
the object alive, or if another GitConfigParser object for the same
repository is initiated while a reference to the existing one is still held.
The author of GitPython appears to still be struggling with this as of
commit a05e49d2419 of GitPython[0].  Fortunately, we don't have to chase this
down: we can just clear the lock when we know we're done, rather than hope that
__del__ gets called.

  [0]: https://github.com/gitpython-developers/GitPython/commit/a05e49d2419

Change-Id: Ie869f0b147577d3b2a0b57afba4474ee07753210
---
 zuul/merger/merger.py | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/zuul/merger/merger.py b/zuul/merger/merger.py
index 94933de..d7867af 100644
--- a/zuul/merger/merger.py
+++ b/zuul/merger/merger.py
@@ -70,7 +70,18 @@ class Repo(object):
         if self.username:
             repo.config_writer().set_value('user', 'name',
                                            self.username)
-        repo.config_writer().write()
+        config_writer = repo.config_writer()
+        try:
+            # GitConfigParser.write() acquires a lock but does not release it.
+            # The lock is released in the object's __del__ method, which is
+            # invoked when the object is about to be dereferenced. This is not
+            # a reliable means of ensuring the lock is released, because it can
+            # break if there is a circular reference keeping the object alive,
+            # or if another GitConfigParser object for the same repository is
+            # initiated while a reference to the existing one is still held.
+            config_writer.write()
+        finally:
+            config_writer._lock._release_lock()
         self._initialized = True
 
     def isInitialized(self):
