From: Antoine Musso <hashar@free.fr>
Date: Tue, 24 Nov 2015 14:11:05 +0100
Subject: zuul-cloner: recognizes bare repos in cache dir

A git cache populated with non-bare repositories (ie workspace checked
out) has a couple issues:

* the working copy checkout is unneeded for caching purposes and
  uselessly consumes disk space.  That makes disk images larger than
  strictly needed.

* checked out files might conflict with repositories names. git bare
  clones are suffixed with '.git' which reduces the risk.

Recognize bare clones before non-bare clones.
Short circuit the logic when neither is found.
Rename git_cache to repo_cache to avoid confusion since it now varies.

Cover bare repos suffixed with '.git' are properly recognized by
inspecing the logging message emitted when the cache is hit.

Change-Id: I3d5177787de5c4d629969cee1f715d692275ad9a
---
 tests/test_cloner.py | 23 +++++++++++++++++++++++
 zuul/lib/cloner.py   | 39 ++++++++++++++++++++++++---------------
 2 files changed, 47 insertions(+), 15 deletions(-)

diff --git a/tests/test_cloner.py b/tests/test_cloner.py
index 1ce4a0a..2f5f8a7 100644
--- a/tests/test_cloner.py
+++ b/tests/test_cloner.py
@@ -15,6 +15,7 @@
 # License for the specific language governing permissions and limitations
 # under the License.
 
+import fixtures
 import logging
 import os
 import shutil
@@ -118,6 +119,28 @@ class TestCloner(ZuulTestCase):
         self.worker.release()
         self.waitUntilSettled()
 
+    def test_recognize_bare_cache(self):
+        cache_root = os.path.join(self.test_root, "cache")
+        upstream_repo_path = os.path.join(self.upstream_root, 'org/project1')
+        cache_bare_path = os.path.join(cache_root, 'org/project1.git')
+        cache_repo = git.Repo.clone_from(upstream_repo_path, cache_bare_path,
+                                         bare=True)
+        self.assertTrue(type(cache_repo.bare), msg='Cache repo is bare')
+
+        log_fixture = self.useFixture(fixtures.FakeLogger(level=logging.INFO))
+        cloner = zuul.lib.cloner.Cloner(
+            git_base_url=self.upstream_root,
+            projects=['org/project1'],
+            workspace=self.workspace_root,
+            zuul_branch='HEAD',
+            zuul_ref='HEAD',
+            zuul_url=self.git_root,
+            cache_dir=cache_root
+        )
+        cloner.execute()
+        self.assertIn('Creating repo org/project1 from cache file://%s' % (
+                      cache_bare_path), log_fixture.output)
+
     def test_one_branch(self):
         self.worker.hold_jobs_in_build = True
 
diff --git a/zuul/lib/cloner.py b/zuul/lib/cloner.py
index 3a12a40..77f52fa 100644
--- a/zuul/lib/cloner.py
+++ b/zuul/lib/cloner.py
@@ -71,25 +71,34 @@ class Cloner(object):
     def cloneUpstream(self, project, dest):
         # Check for a cached git repo first
         git_cache = '%s/%s' % (self.cache_dir, project)
+        git_cache_bare = '%s.git' % (git_cache)
         git_upstream = '%s/%s' % (self.git_url, project)
+
         repo_is_cloned = os.path.exists(os.path.join(dest, '.git'))
-        if (self.cache_dir and
-            os.path.exists(git_cache) and
-            not repo_is_cloned):
-
-            if self.cache_no_hardlinks:
-                # file:// tells git not to hard-link across repos
-                git_cache = 'file://%s' % git_cache
-
-            self.log.info("Creating repo %s from cache %s",
-                          project, git_cache)
-            new_repo = git.Repo.clone_from(git_cache, dest)
-            self.log.info("Updating origin remote in repo %s to %s",
-                          project, git_upstream)
-            new_repo.remotes.origin.config_writer.set('url', git_upstream)
-        else:
+
+        repo_cache = None
+        if (self.cache_dir and not repo_is_cloned):
+            if os.path.exists(git_cache_bare):
+                repo_cache = git_cache_bare
+            elif os.path.exists(git_cache):
+                repo_cache = git_cache
+
+            if repo_cache:
+                if self.cache_no_hardlinks:
+                    # file:// tells git not to hard-link across repos
+                    repo_cache = 'file://%s' % repo_cache
+
+                self.log.info("Creating repo %s from cache %s",
+                              project, repo_cache)
+                new_repo = git.Repo.clone_from(repo_cache, dest)
+                self.log.info("Updating origin remote in repo %s to %s",
+                              project, git_upstream)
+                new_repo.remotes.origin.config_writer.set('url', git_upstream)
+
+        if not repo_cache:
             self.log.info("Creating repo %s from upstream %s",
                           project, git_upstream)
+
         repo = Repo(
             remote=git_upstream,
             local=dest,
